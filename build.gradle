plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.2'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'com.diffplug.spotless' version '6.23.3'
}

group = 'org.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // spring boot
    implementation 'org.springframework.boot:spring-boot-starter'

    // jpa
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // web
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // h2
    implementation 'com.h2database:h2'

    //validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    //redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    //devtools
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.named("compileJava") {
    dependsOn 'spotlessJava'
}

ext.googleJavaFormatVersion = "1.11.0"

spotless {
    java {
        googleJavaFormat("$googleJavaFormatVersion")
        // 아래 순서로 import문 정렬
        importOrder('java', 'javax', 'jakarta', 'org', 'com')
        // 사용하지 않는 import 제거
        removeUnusedImports()
        // 각 라인 끝에 있는 공백을 제거
        trimTrailingWhitespace()
        // 파일 끝에 새로운 라인 추가
        endWithNewline()
    }
}

// Git hooks 업데이트 작업
tasks.register('updateGitHooks', Copy) {
    from 'script/pre-commit'
    into '.git/hooks'
}

// makeGitHooksExecutable 작업을 OS에 따라 실행 여부 결정
tasks.register('makeGitHooksExecutable', Exec) {
    // Windows가 아닌 경우에만 실행
    onlyIf { !System.properties['os.name'].toLowerCase().contains('windows') }

    commandLine 'chmod', '+x', '.git/hooks/pre-commit'
    dependsOn 'updateGitHooks'
}

// compileJava 작업이 실행되기 전에 makeGitHooksExecutable 작업을 실행
tasks.named('compileJava') {
    dependsOn 'makeGitHooksExecutable'
}